name: Build and Deploy to Ubuntu

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Чекаут кода
      - uses: actions/checkout@v3
      
      # Отладка: вывести содержимое директории
      - name: Debug directory contents
        run: |
          pwd
          ls -la
          find . -type f
      
      # Настройка Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Логин в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Сборка и пуш Docker образа
      - name: Build and push Docker image
        env:
          COMPOSE_PROJECT_NAME: inapi
        run: |
          docker compose build --no-cache
          echo "Listing Docker images after build:"
          docker images
          docker tag inapi-api:latest tor4narek/inapi:latest
          docker push tor4narek/inapi:latest
      
      # Деплой на Ubuntu сервер
      - name: Deploy to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/inapi
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker compose down || true
            docker pull tor4narek/inapi:latest

            # Передача конфигурационных данных в переменные окружения на сервере
            export AI_API_URL="${{ secrets.AI_API_URL }}"
            export AUTHORIZATION_TOKEN_KEY="${{ secrets.AUTHORIZATION_TOKEN_KEY }}"
            export JWT_KEY="${{ secrets.JWT_KEY }}"
            export JWT_ISSUER="${{ secrets.JWT_ISSUER }}"
            export JWT_AUDIENCE="${{ secrets.JWT_AUDIENCE }}"
            export JWT_EXPIRY_IN_MINUTES="${{ secrets.JWT_EXPIRY_IN_MINUTES }}"
            export TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
            export MARKDOWN_PROD_PATH="${{ secrets.MARKDOWN_PROD_PATH }}"
            export LOGGING__LOGLEVEL__DEFAULT="${{ secrets.LOGGING__LOGLEVEL__DEFAULT }}"
            export LOGGING__LOGLEVEL__MICROSOFT_ASPNETCORE="${{ secrets.LOGGING__LOGLEVEL__MICROSOFT_ASPNETCORE }}"
            export DEFAULT_CONNECTION="${{ secrets.DEFAULT_CONNECTION }}"
            export ALLOWEDHOSTS="${{ secrets.ALLOWEDHOSTS }}"
            
            # Сохраняем docker-compose файл с секректами
            echo "${{ secrets.DOCKER_COMPOSE }}" > docker-compose.yml
            docker compose up -d
